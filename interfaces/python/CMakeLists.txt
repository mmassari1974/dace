FIND_PACKAGE(PythonInterp)

if (PYTHONINTERP_FOUND)
  if (UNIX AND NOT APPLE)
    if (PYTHON_VERSION_MAJOR EQUAL 3)
        FIND_PACKAGE(Boost COMPONENTS python${PYTHON_VERSION_SUFFIX})
        FIND_PACKAGE(PythonInterp 3)
        FIND_PACKAGE(PythonLibs 3 REQUIRED)
    else()
        FIND_PACKAGE(Boost COMPONENTS python)
        FIND_PACKAGE(PythonInterp)
        FIND_PACKAGE(PythonLibs REQUIRED)
    endif()
  else()	
    if (PYTHON_VERSION_MAJOR EQUAL 3)
        FIND_PACKAGE(Boost COMPONENTS python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR})
        FIND_PACKAGE(PythonInterp 3)
        FIND_PACKAGE(PythonLibs 3 REQUIRED)
    else()
        FIND_PACKAGE(Boost COMPONENTS python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR})
        FIND_PACKAGE(PythonInterp)
        FIND_PACKAGE(PythonLibs REQUIRED)
    endif()
  endif()
else()
    message("Python not found")
endif()

message(STATUS "PYTHON_LIBRARIES = ${PYTHON_LIBRARIES}")
message(STATUS "PYTHON_EXECUTABLE = ${PYTHON_EXECUTABLE}")
message(STATUS "PYTHON_INCLUDE_DIRS = ${PYTHON_INCLUDE_DIRS}")
message(STATUS "Boost_LIBRARIES = ${Boost_LIBRARIES}")

#SET(Boost_USE_STATIC_LIBS OFF)
#SET(Boost_USE_MULTITHREADED ON)
#SET(Boost_USE_STATIC_RUNTIME OFF)

INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS})
LINK_LIBRARIES(${Boost_LIBRARIES} ${PYTHON_LIBRARIES}) # Deprecated but so convenient!

add_library(dacepy OBJECT PyDACE.cpp)
set_target_properties(dacepy PROPERTIES POSITION_INDEPENDENT_CODE True)

ADD_LIBRARY(PyDACE SHARED $<TARGET_OBJECTS:c_core> $<TARGET_OBJECTS:c_core_contrib> $<TARGET_OBJECTS:dacecxx> $<TARGET_OBJECTS:dacepy>)

IF(WIN32 AND NOT CYGWIN)
  set_target_properties(PyDACE PROPERTIES PREFIX "" SUFFIX ".pyd")
ELSE(WIN32 AND NOT CYGWIN)
  set_target_properties(PyDACE PROPERTIES PREFIX "" SUFFIX ".so")
ENDIF(WIN32 AND NOT CYGWIN)

#PYTHON_ADD_MODULE(PyDACE PyDACE.cpp)

install(TARGETS PyDACE LIBRARY DESTINATION lib COMPONENT libraries
            RUNTIME DESTINATION lib COMPONENT libraries 
            ARCHIVE DESTINATION lib COMPONENT libraries
            PUBLIC_HEADER DESTINATION include COMPONENT headers)

# IF(Boost_FOUND)
#   INCLUDE_DIRECTORIES("${Boost_INCLUDE_DIR}" "${PYTHON_INCLUDE_DIRS}")
#   SET(Boost_USE_STATIC_LIBS OFF)
#   SET(Boost_USE_MULTITHREADED ON)
#   SET(Boost_USE_STATIC_RUNTIME OFF)
# ELSEIF(NOT Boost_FOUND)
#   MESSAGE(FATAL_ERROR "Unable to find correct Boost version. Did you set BOOST_ROOT?")
# ENDIF()